<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Futuristic Shopping List</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #00bcd4; /* Cyan - A vibrant, techy primary color */
            --secondary-color: #3f51b5; /* Indigo - Deep, sophisticated secondary */
            --accent-color: #f44336; /* Red - Energetic, modern for buttons */
            --background-dark: #1a1a2e; /* Deep dark blue-purple */
            --background-lighter: #2a2a4a; /* Slightly lighter for containers */
            --text-primary: #e0e0e0; /* Light grey text */
            --text-secondary: #a0a0a0; /* Muted grey text */
            --border-color: #4a4a6a; /* Subtler border */
            --success-color: #4caf50;
            --error-color: #f44336;
            --transition-duration: 0.4s; /* Slightly longer transitions */
            --border-radius: 12px; /* More rounded */
        }

        body {
            font-family: 'Montserrat', sans-serif;
            background: linear-gradient(135deg, var(--background-dark) 0%, #0f0f1d 100%);
            color: var(--text-primary);
            padding: 20px;
            margin: 0;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow-x: hidden; /* ซ่อนแถบเลื่อนแนวนอน */
            overflow-y: auto; /* อนุญาตให้เลื่อนแนวตั้งตามปกติ */
            box-sizing: border-box; /* รวม padding และ border ในความกว้าง/สูง */
        }

        /* Animated background particles */
        body::before {
            content: '';
            position: fixed; /* ใช้ fixed แทน absolute เพื่อให้มันอยู่กับ viewport */
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at top left, rgba(0, 188, 212, 0.1) 0%, transparent 40%),
                        radial-gradient(circle at bottom right, rgba(63, 81, 181, 0.1) 0%, transparent 40%);
            animation: backgroundPulse 15s infinite alternate ease-in-out;
            z-index: -1;
        }

        @keyframes backgroundPulse {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.05); opacity: 0.8; }
            100% { transform: scale(1); opacity: 1; }
        }

        .container {
            background-color: var(--background-lighter);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.5);
            border-radius: var(--border-radius);
            padding: 40px 30px;
            width: 100%;
            max-width: 550px;
            text-align: center;
            opacity: 0;
            transform: translateY(30px) scale(0.95);
            animation: containerEnter var(--transition-duration) cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards 0.2s;
            box-sizing: border-box;
        }

        @keyframes containerEnter {
            to { opacity: 1; transform: translateY(0) scale(1); }
        }

        h1 {
            color: var(--primary-color);
            font-size: 42px;
            margin-bottom: 25px;
            font-weight: 700;
            letter-spacing: 1.5px;
            text-shadow: 0 0 15px rgba(0, 188, 212, 0.5);
        }

        h2 {
            color: var(--secondary-color);
            font-size: 28px;
            margin-top: 35px;
            margin-bottom: 18px;
            font-weight: 600;
        }

        .input-group {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            margin-bottom: 10px;
            flex-wrap: wrap;
        }

        .input-group input[type="text"] {
            flex-grow: 1;
            padding: 14px 20px;
            border: 2px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: 17px;
            outline: none;
            background-color: var(--background-dark);
            color: var(--text-primary);
            transition: border-color var(--transition-duration), box-shadow var(--transition-duration), background-color var(--transition-duration);
            box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.3);
            min-width: 150px;
            box-sizing: border-box;
        }

        .input-group input[type="text"]:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 18px rgba(0, 188, 212, 0.6), inset 0 0 10px rgba(0, 188, 212, 0.4);
            background-color: #24243a;
        }

        .input-group button {
            width: auto;
            padding: 15px 25px;
            max-width: none;
            margin-top: 0;
            flex-shrink: 0;
            box-sizing: border-box;
        }

        button {
            position: relative;
            overflow: hidden;
            background-color: var(--accent-color);
            color: var(--text-primary);
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 18px;
            font-weight: 700;
            transition: background-color var(--transition-duration), transform 0.2s ease-out, box-shadow var(--transition-duration);
            letter-spacing: 0.5px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        button:hover {
            background-color: #d32f2f;
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5), 0 0 25px var(--accent-color);
        }

        button:active {
            transform: translateY(0) scale(0.98);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.3);
        }

        button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.2);
            transform: translate(-50%, -50%);
            opacity: 0;
            transition: width 0.6s ease-out, height 0.6s ease-out, opacity 0.6s ease-out;
            z-index: 0;
        }

        button:focus::before {
            opacity: 1;
            width: 300%;
            height: 300%;
        }

        button > * {
            position: relative;
            z-index: 1;
        }

        #shoppingList {
            list-style-type: none;
            padding: 0;
            margin: 25px 0;
            text-align: left;
            border-radius: var(--border-radius);
            overflow: hidden;
            max-height: 300px;
            overflow-y: auto;
            scroll-behavior: smooth;
            scrollbar-width: thin;
            scrollbar-color: var(--secondary-color) var(--background-dark);
        }

        /* Webkit browsers (Chrome, Safari) scrollbar styling */
        #shoppingList::-webkit-scrollbar {
            width: 8px;
        }

        #shoppingList::-webkit-scrollbar-track {
            background: var(--background-dark);
            border-radius: 10px;
        }

        #shoppingList::-webkit-scrollbar-thumb {
            background-color: var(--secondary-color);
            border-radius: 10px;
            border: 2px solid var(--background-dark);
        }

        #shoppingList li {
            background-color: var(--background-dark);
            border-bottom: 1px solid var(--border-color);
            margin: 0;
            padding: 12px 20px;
            font-size: 17px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: background-color var(--transition-duration), transform var(--transition-duration), box-shadow var(--transition-duration);
            transform-origin: center left;
            cursor: pointer; /* ทำให้คลิกได้ */
            user-select: none; /* ป้องกันการเลือกข้อความเมื่อคลิก */
        }

        #shoppingList li:first-child {
            border-top-left-radius: var(--border-radius);
            border-top-right-radius: var(--border-radius);
        }

        #shoppingList li:last-child {
            border-bottom-left-radius: var(--border-radius);
            border-bottom-right-radius: var(--border-radius);
            border-bottom: none;
        }

        #shoppingList li:nth-child(even) {
            background-color: #20203a;
        }

        #shoppingList li:hover {
            background-color: #353555;
            transform: translateX(8px) scale(1.01);
            box-shadow: 5px 0 20px rgba(0, 188, 212, 0.2), -5px 0 20px rgba(63, 81, 181, 0.2);
        }

        /* Style for the span containing the item text and number */
        #shoppingList li span.item-content {
            flex-grow: 1;
            margin-right: 15px;
            white-space: normal;
            overflow-wrap: break-word;
            min-width: 0;
            word-break: break-word;
            display: flex; /* ใช้ flex เพื่อจัดเรียง checkbox/checkmark กับข้อความ */
            align-items: center;
            gap: 10px; /* ระยะห่างระหว่าง checkmark กับข้อความ */
        }

        /* Style for the checkmark itself */
        .checkmark {
            color: var(--text-secondary); /* สีเทาเริ่มต้น */
            font-size: 22px; /* ขนาดใหญ่ขึ้นเล็กน้อย */
            transition: color 0.3s ease-in-out, transform 0.2s ease-out;
            flex-shrink: 0; /* ป้องกันไม่ให้ checkmark หด */
            width: 22px; /* กำหนดความกว้างเพื่อความสม่ำเสมอ */
            text-align: center; /* จัดให้อยู่กึ่งกลาง */
        }

        #shoppingList li.completed .checkmark {
            color: var(--success-color); /* สีเขียวเมื่อเสร็จสมบูรณ์ */
            transform: scale(1.2); /* ขยายใหญ่ขึ้นเมื่อเสร็จ */
        }

        #shoppingList li.completed span.item-content {
            text-decoration: line-through; /* ขีดฆ่าข้อความเมื่อเสร็จ */
            color: var(--text-secondary); /* ทำให้ข้อความซีดลงเมื่อเสร็จ */
        }


        .remove-button {
            background: none;
            color: var(--error-color);
            border: none;
            font-size: 20px;
            cursor: pointer;
            outline: none;
            opacity: 0.8;
            transition: opacity var(--transition-duration), color var(--transition-duration), transform 0.2s ease-out;
            transform-origin: center;
            flex-shrink: 0;
        }

        .remove-button:hover {
            opacity: 1;
            color: #ff5722;
            transform: scale(1.2) rotate(90deg);
        }

        .error {
            color: var(--error-color);
            font-size: 15px;
            margin-top: 10px;
            min-height: 20px;
            font-weight: 600;
        }

        .fade-in-item {
            animation: itemSlideIn var(--transition-duration) ease-out forwards;
            opacity: 0;
            transform: translateX(-20px);
        }

        @keyframes itemSlideIn {
            to { opacity: 1; transform: translateX(0); }
        }

        #shoppingList li.empty-message {
            background-color: var(--background-lighter);
            border: none;
            text-align: center;
            font-style: italic;
            padding: 20px;
            border-radius: var(--border-radius);
            color: var(--text-secondary);
            animation: fadeIn var(--transition-duration) ease-out;
            border-bottom: none;
            white-space: normal;
            text-overflow: clip;
            cursor: default; /* Remove pointer for empty message */
        }

        .remove-by-number-section {
            display: none;
        }

        /* === Media Queries for Mobile Responsiveness === */
        @media (max-width: 600px) {
            body {
                padding: 10px;
                align-items: flex-start;
            }

            .container {
                padding: 25px 20px;
                border-radius: 8px;
            }

            h1 {
                font-size: 32px;
                margin-bottom: 20px;
            }

            h2 {
                font-size: 22px;
                margin-top: 25px;
                margin-bottom: 15px;
            }

            .input-group {
                flex-direction: column;
                gap: 8px;
            }

            .input-group input[type="text"],
            .input-group button {
                width: 100%;
                max-width: none;
            }

            #shoppingList li {
                padding: 10px 15px;
                font-size: 16px;
            }

            #shoppingList li span.item-content {
                margin-right: 10px;
                gap: 8px; /* ลดระยะห่าง checkmark กับข้อความบนมือถือ */
            }

            .checkmark {
                font-size: 20px; /* ปรับขนาด checkmark บนมือถือ */
                width: 20px;
            }

            .remove-button {
                font-size: 18px;
            }
        }
    </style>
</head>
<body>

<div class="container">
    <h1>Shopping List</h1>

    <div class="input-group">
        <input type="text" id="itemInput" placeholder="Add a new item...">
        <button onclick="addItem()">Add</button>
    </div>

    <p id="errorMessage" class="error"></p>

    <h2>Your Items:</h2>
    <ul id="shoppingList"></ul>

    <div class="remove-by-number-section">
        <h3>Remove an Item:</h3>
        <input type="text" id="removeItemNumber" placeholder="Enter item number to remove...">
        <button onclick="removeItem()">Remove Item</button>
    </div>
</div>

<script>
    // เปลี่ยนโครงสร้างข้อมูลเพื่อให้มีสถานะ completed (true/false)
    let shoppingList = []; // [{ item: "นมสด", completed: false }, { item: "ไข่ไก่", completed: true }]

    function addItem() {
        let itemInput = document.getElementById("itemInput");
        let itemValue = itemInput.value.trim();
        let errorMessage = document.getElementById("errorMessage");

        if (itemValue) {
            // เพิ่ม object เข้าไปใน array แทนแค่ string
            shoppingList.push({ item: itemValue, completed: false });
            itemInput.value = "";
            errorMessage.textContent = "";
            renderShoppingList();
            itemInput.focus();

            const listElement = document.getElementById("shoppingList");
            listElement.scrollTo({ top: listElement.scrollHeight, behavior: 'smooth' });

        } else {
            errorMessage.textContent = "Please enter an item to add to the list.";
            itemInput.focus();
        }
    }

    function renderShoppingList() {
        const listElement = document.getElementById("shoppingList");
        listElement.innerHTML = "";

        if (shoppingList.length === 0) {
            let li = document.createElement("li");
            li.textContent = "Your list is empty. Start adding items!";
            li.classList.add('empty-message');
            // Ensure empty message doesn't have interactive styles
            li.style.cursor = 'default';
            li.style.transform = 'none';
            li.style.boxShadow = 'none';
            listElement.appendChild(li);
            return;
        }

        shoppingList.forEach((listItem, index) => { // เปลี่ยนชื่อ parameter เป็น listItem เพื่อให้ชัดเจน
            let li = document.createElement("li");
            li.setAttribute('data-index', index); // ใช้ data attribute สำหรับระบุ index

            // ถ้ารายการเสร็จสมบูรณ์ ให้เพิ่ม class 'completed'
            if (listItem.completed) {
                li.classList.add('completed');
            }
            
            // ใช้ flex เพื่อจัดเรียง checkmark และข้อความ
            const itemContentSpan = document.createElement("span");
            itemContentSpan.classList.add('item-content');

            // เพิ่ม checkmark
            const checkmarkSpan = document.createElement("span");
            checkmarkSpan.classList.add('checkmark');
            checkmarkSpan.innerHTML = listItem.completed ? '&#10003;' : '&#9744;'; // &#10003; คือ ✅, &#9744; คือ ⬜ (กล่องสี่เหลี่ยม)
            itemContentSpan.appendChild(checkmarkSpan);

            // เพิ่มข้อความรายการ
            const itemTextSpan = document.createElement("span");
            itemTextSpan.textContent = `${index + 1}. ${listItem.item}`; // แสดงเลขลำดับและข้อความ
            itemContentSpan.appendChild(itemTextSpan);

            li.appendChild(itemContentSpan);

            // เพิ่ม Event Listener สำหรับคลิกที่รายการเพื่อสลับสถานะ
            li.onclick = function() {
                toggleCompleted(index);
            };

            // Create the remove button
            const removeButton = document.createElement("button");
            removeButton.textContent = "×";
            removeButton.className = "remove-button";
            removeButton.title = "Remove this item";
            removeButton.onclick = function(event) {
                event.stopPropagation(); // Prevent li click event from firing when clicking the button
                removeItemByIndex(index);
            };
            li.appendChild(removeButton);

            li.classList.add('fade-in-item');
            listElement.appendChild(li);
        });
    }

    function toggleCompleted(index) {
        if (index >= 0 && index < shoppingList.length) {
            shoppingList[index].completed = !shoppingList[index].completed; // สลับสถานะ true/false
            renderShoppingList(); // render ใหม่เพื่อแสดงผลการเปลี่ยนแปลง
        }
    }

    function removeItemByIndex(index) {
        if (index >= 0 && index < shoppingList.length) {
            shoppingList.splice(index, 1);
            renderShoppingList();
        }
    }

    // This function for removing by number is intentionally kept but unused due to hidden UI
    function removeItem() {
        let removeItemNumberInput = document.getElementById("removeItemNumber");
        if (!removeItemNumberInput) return;

        let removeItemNumber = removeItemNumberInput.value.trim();
        let errorMessage = document.getElementById("errorMessage");

        if (removeItemNumber && !isNaN(removeItemNumber)) {
            let indexToRemove = parseInt(removeItemNumber) - 1;

            if (indexToRemove >= 0 && indexToRemove < shoppingList.length) {
                removeItemNumberInput.value = "";
                errorMessage.textContent = "";
                removeItemByIndex(indexToRemove);
                removeItemNumberInput.focus();
            } else {
                errorMessage.textContent = "The item number is invalid or out of range.";
                removeItemNumberInput.focus();
            }
        } else {
            errorMessage.textContent = "Please enter a valid item number to remove.";
            removeItemNumberInput.focus();
        }
    }

    document.getElementById("itemInput").addEventListener("keypress", function(event) {
        if (event.key === "Enter") {
            event.preventDefault();
            addItem();
        }
    });

    const removeItemNumberElement = document.getElementById("removeItemNumber");
    if (removeItemNumberElement) {
        removeItemNumberElement.addEventListener("keypress", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                removeItem();
            }
        });
    }

    document.addEventListener('DOMContentLoaded', renderShoppingList);
</script>

</body>
</html>
